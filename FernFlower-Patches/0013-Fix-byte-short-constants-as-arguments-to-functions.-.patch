From db9f093349a151799497d6b5fbf3e6c48829cba5 Mon Sep 17 00:00:00 2001
From: LexManos <LexManos@gmail.com>
Date: Tue, 18 Apr 2017 19:20:27 -0700
Subject: [PATCH] Fix byte/short constants as arguments to functions. We need
 to cast down from int to byte as the compiler won't infer that.


diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java b/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java
index c707161..4d96913 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java
@@ -878,13 +878,24 @@ public class ExprProcessor implements CodeConstants {
                                          boolean castNull,
                                          boolean castAlways,
                                          BytecodeMappingTracer tracer) {
+    return getCastedExprent(exprent, leftType, buffer, indent, castNull, castAlways, false, tracer);
+  }
+
+  public static boolean getCastedExprent(Exprent exprent,
+                                         VarType leftType,
+                                         TextBuffer buffer,
+                                         int indent,
+                                         boolean castNull,
+                                         boolean castAlways,
+                                         boolean castConstants,
+                                         BytecodeMappingTracer tracer) {
     VarType rightType = exprent.getInferredExprType(leftType);
 
     boolean cast =
       castAlways ||
       (Exprent.needsCast(leftType, rightType, false)) ||
       (castNull && rightType.type == CodeConstants.TYPE_NULL && !UNDEFINED_TYPE_STRING.equals(getTypeName(leftType))) ||
-      (isIntConstant(exprent) && rightType.isStrictSuperset(leftType));
+      (isIntConstant(exprent) && ((castConstants && leftType.type != CodeConstants.TYPE_INT) || rightType.isStrictSuperset(leftType)));
 
     boolean quote = cast && exprent.getPrecedence() >= FunctionExprent.getPrecedence(FunctionExprent.FUNCTION_CAST);
 
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java
index c29f06f..7d98a4b 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java
@@ -509,7 +509,7 @@ public class InvocationExprent extends Exprent {
           type = exprType;
         }*/
 
-        ExprProcessor.getCastedExprent(lstParameters.get(i), type, buff, indent, true, ambiguous, tracer);
+        ExprProcessor.getCastedExprent(lstParameters.get(i), type, buff, indent, true, ambiguous, true, tracer);
         buf.append(buff);
 
         firstParameter = false;
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/NewExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/NewExprent.java
index 324e016..a71fd18 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/NewExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/NewExprent.java
@@ -359,7 +359,7 @@ public class NewExprent extends Exprent {
                 buf.append(", ");
               }
 
-              ExprProcessor.getCastedExprent(expr, leftType, buf, indent, true, tracer);
+              ExprProcessor.getCastedExprent(expr, leftType, buf, indent, true, false, true, tracer);
 
               firstParam = false;
             }
diff --git a/testData/classes/pkg/TestConstants.class b/testData/classes/pkg/TestConstants.class
index 8e09fc6e098db9d6cac53a457ab5824435139f6b..c12ab1fd367191eac88dc009e924fccef6ac7344 100644
GIT binary patch
literal 2424
zcmai$TXWk)7=~ZjvQ=ESagv^(oJvDUU0OG7j!l}54|VI}q@@l4$|1<EaFp0mvE+~f
zGs<7$CY|Ae;hH}Kmt0}qT_^U2OlLjg^*;N3-?OV-OZK1t{`Nb7Y5ZcrxA4Nk4;DHW
z0t;aZX>?OKi5=1WD4JahFD?9J;b#Lz-axwIc}}O;vV*`0IJCz1GXtlJz88eH7p~i_
zt`p}31_Nc$fq_`@CaEYWC1^_YY|*>LUW^%LVa4^BQ;7F^y*<hHuE>hmuk~X!#`Z*R
zZAHeS9{ZJktP<a2vSh|0O4zUVV~-LdCSG#P-c5+Oc#+Giwr56v$XI#RX_}lu<dvWJ
zff*h2=`lsQ80Xw(6v^5WYq{o9GWv&6kpQzqN3!?#km*TA3e%PBN2RYsUo!ejE{E$$
zF1el?E*pqXUR|fI=s$N1j8t9ES?#v#PG`-ow>UCZ^&56;-R`)84+hO})8(0rS6^&5
zb8Aiz9v(`t$h~e)8Myeg>xFLHsdzhX;IcCBd46bzE>F+E+2e&1d6p)2#GwksEz#T-
z&9rD{L^CUzInm6EW`R4xmB-stJo8L-%ighb-Oz32N_OZ_mI}Er&hKy2nAoVl4EbqJ
z7R2Qmb?(4Mu<3U~F;<gfT$s7xdUB*9M_gKJez((b%C6juBiDLEOljb>oVjIt&0Imw
zF)|#e^=B9zj#RwRX*!)FWmVs6a_@&p<(6-A8JXco$?tL#(^$c38qdLA6PsylVcWpy
zu~Rrw`nbO3G-w+?mNt>cCEj^yeoM~d0x}ro7i)|Z!#Mej!e`0nm~|MxKz>u<x5yV2
zew+Lb-W}w>M}A-7OXLr5c@Uo<f2i;k@<*5)#IKUG3ST3CjO&B=4f0Ker^vT?1&8aM
zCeJ85OP*7Bp1h#&9rB{WOXRy)9{BE&^9mQpC57*kA1M5g{7B(XFhUnklkH>fc#fY2
zKNHzkuzr<C@Putr4vyhd_S5|YJVlKJtg$#Ii?5MHvGM=HS*6f8DEy3xCz-y^_vZ~B
z3Gjv9G^aP6r|C<*X<lzyrs<j9w4gVgq3J8V>5kqsNz>PQ)1uyVou+T}rX{`UGELv=
zO?UOCQJOaNre(e9JDP00>7L$Hr>Q|x{{|_`UvD6jHTQ8Mo7l%2+2lS_!>{}p#7}1d
z2^5jy%{YSl$|RY=eZ!~cfpdoWF}{!8H)UCPt{)r}8u(s5!62T!I>m$6C|voFgLrc5
e6c1mcXvybb3~jl5j~B{+JCvQ`eSP}MiT?n$4o4sW

literal 1668
zcmai!%Tv=(6voeO(-g}aL|!VQRS}g^-Uz~!)@rd7q!kr)als4|Y*UA%47>0zxpKyZ
z<Jx~lm#(beNu^xFBAv;}`Q7h)C-*h|@#pI|BATK1F$&Y0DD6h+ZIs>#5-CA#Im<GR
z(q(DehK->To?Suh>8fQr(sFiWxn_jn7Z9?Xkf2a{5|n0&F(o;ZoJ}DMp+Z~RFfG)q
zh3obDsmJn!t6b#8hE{}j%C*G}Pjl<Ya}6yQK1H#|&|EY@o^NRD5!U$UjmeV;>-+;}
z3)0fu@1B+|7zY|Y!FAcKs;#;Ia`e&I&g1yD=DMCY125*B(cRxrxq!3`dg%3E=ZrqO
zt1x=$4b|(HK|kI7=}iao(U(ojbXEj~$L{T*UAp?g5Y(ABEu&DY>={QTxmU(WsFD;k
zyj`;#vts0|W79S<p0cc}BOMcGA*e6^>El77WZ2Hx+1T;alAy>j9}%~h;xNr&hQlm}
zIS%t27C0<oeV9kMlEevi<qzetOw=5+oXAMWK(kn}T07b|vL;We=f96laB&-D=!u~2
z3sXTiuUT1I2Z_zSLu20&)O(>Uo}y7)5WWfhG(b^m!6sh<g(wDYRk#h@P906X6Wpb6
zH@HXPUhrk=Yt~-@_bWUA9;BhBJ`BF9@HOyt8foe`z@rM^1mB`~Q@;(qtMC|j94k0m
z&wcO%g&%?^6i$FA6;6Vu6rKjp&}_5c9C$(DMevfs%itA-SHUTT*Sy|1K6K1t$4BuN
zct^&+kob&5&{M=1j)JhU8YV;Z4CNuOe9)^v)p@Dz`R6DHiPyc3=lMRioG2gcoA>)V
z;M)lHE%<%2@D+l6i+*1#e4D|(M}FT3d|Sc3CBH8Y--}@1vfnoZ-*&L?vESDMUoqIX
h;`f!{dl~Fo_4{^kQ(nOvqSwTKi7{LU4HUW4@)tn-*1`Y)

diff --git a/testData/classes/pkg/TestEnum$3.class b/testData/classes/pkg/TestEnum$3.class
index dc94a7b9fa9a1f1cdebf3289cef7bf02a494d872..7f41f895b581454927c5ed275874ddbefdacd29f 100644
GIT binary patch
delta 17
YcmaFN_Lyx0Co`)Zg9L;AWIpCl04-(&5&!@I

delta 17
YcmaFN_Lyx0Co`)#g9L-dWIpCl04)Rr1ONa4

diff --git a/testData/classes/pkg/TestEnum$Type.class b/testData/classes/pkg/TestEnum$Type.class
index 92f267523f644eaaaab02638df6cd69940b59640..0ef726ac1f3c0d931a38bf172dab8d72d3a5cce8 100644
GIT binary patch
literal 1161
zcma)4Yi|-!5IvV&SXdX@QbfU8AEkDoT2QGkkkAJvB&0Q=k~Dr=aK)|LrCFef|4K_D
zMx*Ixf0S`%OIw;^;wF3VojYgFoSC`5|9t-iAdgZAG9IW{K~_Ob!9x{cJmTeX5D}G}
zc}A=T5oO~E8&4HH6OgtyHwEOKPY0%eR&^ZH-LQ>r*X#<+)($?lvpZ(DS8@9LDaI5C
zTWM6b1e8=`t@fr;7l^%`hzlGVcAshDdU`TK-srretW!11F}M2rP1D^mnl{}iUg-9F
zfhE1RXB-+?+i=?1de60-b|F16U9{F|8Fs^PE#?>z$&Rs4e9_A!0)e9CSiO?KwFx<@
z>*)rS+WTNp0e(-8fLIp@)vdN;^!hH*%DRV|7+>XhQDu;K3>I7VD4(RWZ*fc$x3@T<
zsuHzZt#|rv%Y0>VW5TDySmCZ{nB`%|G(5)(1q7bCG%yVb6gAA_B`>!$L@>jrMGaBR
z2t>}?%POeYmfdkERZLHhDco-EnXMjW(8e<etd952dpL!$sI!4xOhPpA@wgF;`c%%*
z!wl1tmdXiM3eZkEf$1a{OCCQ$xQaMvZe-o1oj>&m;wyZ|kUo<oaGlnG=bI;d0?83R
z51)6dM&-;m_>Uno-gg0igKo4F6y|W#^Hb{x#Tg5bNF$(Rmgj~DeDU1p=@!7@aRL(r
zw^_P(x<gVWEYR796#X=T|07KOlknad;Sz$-ksj6fntH@v?g!-Es3OTj1P2ItmMZ&)
zxH5p||4B~ih~D$Ad<3mNfZ$S2Iu{{kP{k1{V2-4o3eRAf?tQqAY1&mn%gAA>ocs&Y
CaNOts

delta 472
zcmZvYOHaZ;6ot>Ug=tH9OO=NxK6yz&*+C3!G$!syOo*$-7_1>(VAZ8-*Zn2Hf&`-*
zcm62#PUC`wGs(Sk=DTyx&Ae)#y!-XN`~c8KTZ4iF9fv4$q&ccO4AexZtBC3Z>!RXF
zMN;Gjhc)eoSjQ}1-rG;MHMZT6HSi{mJL+6it{4>W&Us+a2F}Q}y~oKdgIpFs?cR(X
z*YQsMB|DF$gjw1^6D^KoKQ5W64V)O*MA1ML2?I$a{J!+u=rzgLpkd`+RuF(PK_HO>
zwIQNF!x}PRF#R7XpIN87Fe#u&WCPiNSaSYlmE?#UL6wd?3Zx`qPtl}v3o>nhS8Ig@
z!qWi%|D0n>jDzi<rUVr`C<#l_XEdBxjW;O6)HRnEQ0LGBr7MAmgx-nCGy1ckGDBoA
d2NQM-t9J5V`(5l2ldz9CWu2-NR1oXsegPR_HZ=eM

diff --git a/testData/classes/pkg/TestEnum.class b/testData/classes/pkg/TestEnum.class
index 12bb8932e0bdf70f6b5d82adc8b325376e6abfcd..81cf5cf857c0e43ee0dd3b123b9d54bb3459e5ba 100644
GIT binary patch
delta 72
zcmZ24yk2-i0vn_H<U}?{M(xRq*}NHbCckI9uBp$U!C=T>z+l8+%wWP`&0xx4$6(Ij
b#$dtV$za702;}83I53njIBkB<et;1Ga;OjZ

delta 72
zcmZ24yk2-i0vn^k<U}?{MwQ8n*}NH5C%<RAuBpMG!Jx%pz@W`w%%IC)&7j9%2jsai
a7&3SQMFJVj8FCmb8A=$eH@{~;zz6_l6c3gF

diff --git a/testData/results/TestConstants.dec b/testData/results/TestConstants.dec
index 1170f1a..3028138 100644
--- a/testData/results/TestConstants.dec
+++ b/testData/results/TestConstants.dec
@@ -67,6 +67,21 @@ public class TestConstants {
    void m10() {
    }// 63
 
+   void testInvoke() {
+      this._byte((byte)1);// 66
+      this._short((short)2);// 67
+      this._int(3);// 68
+   }// 69
+
+   void _byte(byte b) {
+   }// 70
+
+   void _short(short s) {
+   }// 71
+
+   void _int(int i) {
+   }// 72
+
    @interface A {
       Class<?> value();
    }
@@ -112,6 +127,37 @@ class 'pkg/TestConstants' {
    method 'm10 ()V' {
       0      67
    }
+
+   method 'testInvoke ()V' {
+      0      70
+      1      70
+      2      70
+      3      70
+      4      70
+      5      71
+      6      71
+      7      71
+      8      71
+      9      71
+      a      72
+      b      72
+      c      72
+      d      72
+      e      72
+      f      73
+   }
+
+   method '_byte (B)V' {
+      0      76
+   }
+
+   method '_short (S)V' {
+      0      79
+   }
+
+   method '_int (I)V' {
+      0      82
+   }
 }
 
 Lines mapping:
@@ -125,3 +171,10 @@ Lines mapping:
 61 <-> 60
 62 <-> 64
 63 <-> 68
+66 <-> 71
+67 <-> 72
+68 <-> 73
+69 <-> 74
+70 <-> 77
+71 <-> 80
+72 <-> 83
diff --git a/testData/results/TestEnum.dec b/testData/results/TestEnum.dec
index ce2511c..7898078 100644
--- a/testData/results/TestEnum.dec
+++ b/testData/results/TestEnum.dec
@@ -15,41 +15,47 @@ public enum TestEnum {
    private String s;
 
    public void m() {
-   }// 32
+   }// 39
 
    private TestEnum() {
-      this("?", (TestEnum.Type)null);// 36
+      this("?", (TestEnum.Type)null);// 43
    }
 
    private TestEnum(@Deprecated String s, TestEnum.Type t) {
-      this.s = s;// 37
+      this.s = s;// 44
    }
 
    private void testSwitch() {
-      switch(this) {// 40
+      switch(this) {// 47
       case E1:
-         System.out.println("E1");// 42
-         break;// 43
+         System.out.println("E1");// 49
+         break;// 50
       case E2:
-         System.out.println("E2");// 45
-         break;// 46
+         System.out.println("E2");// 52
+         break;// 53
       case E3:
-         System.out.println("E3");// 48
-         break;// 49
+         System.out.println("E3");// 55
+         break;// 56
       case E4:
-         System.out.println("E4");// 51
+         System.out.println("E4");// 58
       }
 
-      switch(TestEnum.Type.ODD) {// 55
+      switch(TestEnum.Type.ODD) {// 62
       case ODD:
-         System.out.println("ODD");// 57
+         System.out.println("ODD");// 64
       default:
       }
-   }// 59
+   }// 66
 
    private static enum Type {
-      ODD,
-      EVEN;
+      ODD((byte)1),
+      EVEN(2);
+
+      private Type(byte value) {
+      }// 35
+
+      private Type(int value) {
+      }// 36
    }
 }
 
@@ -151,20 +157,32 @@ class 'pkg/TestEnum' {
    }
 }
 
+class 'pkg/TestEnum$Type' {
+   method '<init> (Ljava/lang/String;IB)V' {
+      6      54
+   }
+
+   method '<init> (Ljava/lang/String;II)V' {
+      6      57
+   }
+}
+
 Lines mapping:
 22 <-> 7
 27 <-> 12
-32 <-> 18
-36 <-> 21
-37 <-> 25
-40 <-> 29
-42 <-> 31
-43 <-> 32
-45 <-> 34
-46 <-> 35
-48 <-> 37
-49 <-> 38
-51 <-> 40
-55 <-> 43
-57 <-> 45
-59 <-> 48
+35 <-> 55
+36 <-> 58
+39 <-> 18
+43 <-> 21
+44 <-> 25
+47 <-> 29
+49 <-> 31
+50 <-> 32
+52 <-> 34
+53 <-> 35
+55 <-> 37
+56 <-> 38
+58 <-> 40
+62 <-> 43
+64 <-> 45
+66 <-> 48
diff --git a/testData/src/pkg/TestConstants.java b/testData/src/pkg/TestConstants.java
index 09b5419..1eb76a9 100644
--- a/testData/src/pkg/TestConstants.java
+++ b/testData/src/pkg/TestConstants.java
@@ -61,4 +61,13 @@ public class TestConstants {
   @A(boolean.class) void m8() { }
   @A(void.class) void m9() { }
   @A(java.util.Date.class) void m10() { }
+
+  void testInvoke() {
+    _byte((byte)1);
+    _short((short)2);
+    _int(3);    
+  }
+  void _byte(byte b){}
+  void _short(short s){}
+  void _int(int i){}
 }
\ No newline at end of file
diff --git a/testData/src/pkg/TestEnum.java b/testData/src/pkg/TestEnum.java
index 974898e..8c0311d 100644
--- a/testData/src/pkg/TestEnum.java
+++ b/testData/src/pkg/TestEnum.java
@@ -27,7 +27,14 @@ public enum TestEnum {
     public void m() { }
   };
 
-  private enum Type {ODD, EVEN}
+  private enum Type {
+    ODD((byte)1),
+    EVEN(2);
+    
+
+    private Type(byte value) {}
+    private Type(int value) {}
+  }
 
   public void m() { }
 
-- 
2.11.0

